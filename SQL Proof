// List available databases

show databases;


// Create a database

CREATE DATABASE database_name;


// Delete a database

DROP DATABASE database_name;


// Create a TABLE

     CREATE TABLE tablename
      (
        column_name data_type,
        column_name data_type
      );
      
      
// Null and Not Null

CREATE TABLE tablename
      (
        column_name data_type NOT NULL,
        column_name data_type NOT NULL
      );
      
      
// DEFAULT

    CREATE TABLE tablename
      (
        name VARCHAR(20) DEFAULT 'no name provided',
        age INT DEFAULT 99
      );
      
      
// Primary Key

        CREATE TABLE tablename
      (
        id INT NOT NULL,
        name VARCHAR(100),
        age INT,
        PRIMARY KEY (id)
      );
      
      
// Drop a table

DROP TABLE <tablename>; 


// Insert data

INSERT INTO table_name(column_name) VALUES (data);

    
// Multiple inserts

INSERT INTO table_name 
            (column_name, column_name) 
VALUES      (value, value), 
            (value, value), 
            (value, value);
            

// Table Information

DESC tablename;


// Basic Select

SELECT * FROM tablename;

SELECT column_name1, columan_name2, column_name3 FROM tablename; 

SELECT * FROM tablename WHERE column_name=value(INT);

SELECT * FROM tablename WHERE column_name='value(CHAR)';


// Deleting specific line from table

DELETE FROM table_name WHERE column_name='value(CHAR)' or value(INT);


// Delete all data from table

DELETE FROM tablename;


// CONCAT examples

SELECT CONCAT('Hello', 'World'); // 
 
SELECT CONCAT('Hello', '...', 'World');

SELECT column_name1 AS alias, column_name2 AS alias, 
  CONCAT(column_name1, ' ', column_name2) AS full
FROM tablename;


// Substring

SELECT SUBSTRING('Hello World', Beginning character, End character);

SELECT CONCAT
    (
        SUBSTRING(value,Beginning character, End character);
    ) AS 'alias'
FROM tablename;


// REPLACE

SELECT
    SUBSTRING(REPLACE(value, 'what will be replaced', 'replacing with'), 1, 10) AS 'alias'
FROM tablename;


// Reverse

SELECT REVERSE('Hello World');

// CHAR_LENGTH

SELECT CHAR_LENGTH('Hello World');


// Upper and Lower

SELECT UPPER('Hello World'); -> HELLO WORLD
 
SELECT LOWER('Hello World'); -> hello world

SELECT CONCAT('MY TV SHOW BOOK IS ', UPPER(show)) FROM tv_shows;
 
SELECT CONCAT('MMY TV SHOW BOOK IS ', LOWER(show)) FROM tv_shows;


// Distinct

SELECT DISTINCT column_name FROM tablename;
 
SELECT DISTINCT CONCAT(column_name1,' ', column_name2) FROM tablename;


// ORDER BY

SELECT column_name1, column_name2, column_name3 FROM tablename ORDER BY column_name1 (ASC or DESC);


// Limit

SELECT column_name1, column_name2 FROM tablename 
ORDER BY column_name2 DESC LIMIT (number or results wanted);


// LIKE

SELECT column_name1, column_name2 FROM tablename WHERE column_name1 LIKE '%search value%'

SELECT column_name1, stock_quantity FROM tablename WHERE stock_quantity LIKE '____';


// Not Like


SELECT column_name1, column_name2 FROM tablename WHERE column_name1 NOT LIKE '%search value%'


// Count

SELECT COUNT(*) FROM tablename;

SELECT COUNT(DISTINCT column_name) FROM tablename;

SELECT COUNT(*) FROM tablename WHERE column_name LIKE '%search value%';


// Group By

SELECT column_name, COUNT(*) 
FROM tablename GROUP BY column_name;

SELECT column_name1, column_name2, COUNT(*) FROM tablename GROUP BY column_name1, column_name2;

SELECT CONCAT('In ', released_year, ' ', COUNT(*), ' book(s) released') AS year FROM books GROUP BY released_year;

// MIN and MAX

SELECT MIN(column_name) 
FROM tablename;

SELECT MAX(column_name) 
FROM tablename;

SELECT column_name1, 
       column_name2, 
       Min(column_name3) 
FROM   tablename 
GROUP  BY column_name1, 
          column_name2;


// SUM

SELECT SUM(column_name)
FROM tablename;

SELECT column_name1, 
       column_name2, 
       SUM(column_name3) 
FROM books
GROUP BY
    column_name1,
    column_name2;
    
    
// Average

SELECT AVG(column_name1) 
FROM tablename;

SELECT column_name1, column_name2, AVG(column_name3) FROM tablename
GROUP BY column_name1, column_name2;


// CHAR and VARCHAR (CHAR = fixed, VARCHAR = variable)

CREATE TABLE tablename (column_name1 CHAR(5), column_name2 VARCHAR(10));


// Decimal

CREATE TABLE stock(price DECIMAL(number of digits,decimal places));


// Float and Double (Approximate values)

CREATE TABLE stock (price FLOAT);


//Timestamp

CREATE TABLE comments (
    content VARCHAR(100),
    created_at TIMESTAMP DEFAULT NOW()
);


// Not Equal (!=)

 
SELECT column_name1, column_nams2 FROM tablename WHERE column_name2 != 'value';

SELECT column_name1, column_nams2 FROM tablename WHERE column_name1 != INT value;

// Less than amd Greater than

 
SELECT column_name1, column_name2 FROM tablename
WHERE column_name2 < 2000;

SELECT column_name1, column_name2 FROM tablename
WHERE column_name2 <= 2000;

SELECT column_name1, column_name2 FROM tablename
WHERE column_name2 > 2000;

SELECT column_name1, column_name2 FROM tablename
WHERE column_name2 >= 2000;


// Logical AND

SELECT  
    column_name1, 
    column_name2, 
    column_name3 FROM tablename
WHERE column_name2='Value' 
    AND column_name3 > 2010;
    

// Logical OR

SELECT  
    column_name1, 
    column_name2, 
    column_name3 FROM tablename
WHERE column_name2='Value' 
    OR column_name3 > 2010;


SELECT  
    column_name1, 
    column_name2, 
    column_name3 FROM tablename
WHERE column_name2='Value' || column_name3 > 2010;


// Between


SELECT column_name1, column_name2 FROM tablename 
WHERE column_name1 BETWEEN 2004 AND 2015;


// Cases


SELECT column_name1, column_name2,
       CASE 
         WHEN column_name2 >= 50 THEN 'Value1'
         ELSE 'Value2'
       END AS GENRE
       FROM books;
       
SELECT column_name1, column_name2,
    CASE 
        WHEN column_name2 BETWEEN 0 AND 50 THEN '*'
        WHEN column_name2 BETWEEN 51 AND 100 THEN '**'
        WHEN column_name2 BETWEEN 101 AND 150 THEN '***'
        ELSE '****'
    END AS STOCK
FROM books;


// Foreign Keys

    CREATE TABLE tablename1(
        id INT AUTO_INCREMENT PRIMARY KEY,
        column_name1 VARCHAR(100),
        column_name2 VARCHAR(100),
        column_name3 VARCHAR(100)
    );
    CREATE TABLE tablename2(
        id INT AUTO_INCREMENT PRIMARY KEY,
        column_name4 DATE,
        column_name5 DECIMAL(8,2),
        id_2 INT,
        FOREIGN KEY(id_2) REFERENCES tablename1(id)
    );
    
    
    // Cross Joins
    
    SELECT id FROM tablename1 WHERE column_name1='value';
    SELECT * FROM column_name4 WHERE id_2= 1;
    
    // Inner Join
    
    SELECT *
FROM tablename2
JOIN tablename1
    ON tablename1.id = tablename2.id_2;
    
    
    // Left Joins
    
   SELECT 
        column_name1, 
        column_name2,
        IFNULL(SUM(column_name3), 0) AS  'alias'
    FROM tablename1
    LEFT JOIN tablename2
        ON tablename1.id = tablename2.id_2
    GROUP BY tablename1.id
    ORDER BY 'alias';\
    
    
    // Right Join
    
    SELECT 
        IFNULL(column_name1,'MISSING') AS 'alias', 
        IFNULL(column_name2,'USER') AS 'alias', 
        column_name3, 
        column_name4, 
        SUM(column_name5) AS 'alais'
    FROM tablename1
    RIGHT JOIN tablename2
        ON tablename1.id = tablename2.id_2
    GROUP BY column_name1, column_name2;

